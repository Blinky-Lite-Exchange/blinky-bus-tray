[
    {
        "id": "b438688e0b293257",
        "type": "tab",
        "label": "blinky-bus-serial-tray",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "$(MQTTPORT)",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a4f4c59daf894823",
        "type": "serial-port",
        "serialport": "$(SERIALPORT)",
        "serialbaud": "$(BAUDRATE)",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "$(SERIALBUFSIZE)",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": "2000"
    },
    {
        "id": "08ee1fafdc4c41fc",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Save tray config in Memory",
        "func": "let tray = msg.payload;\nflow.set('tray', msg.payload);\nlet blinkybusCubes = [];\nlet blinkybusSettingCubes = [];\nlet keys = Object.keys(msg.payload)\nfor (let ikey  in keys)\n{\n    if (msg.payload[keys[ikey]].hasOwnProperty('type'))\n    {\n        if (msg.payload[keys[ikey]].hasOwnProperty('blinkybus')) \n        {\n            blinkybusCubes.push(keys[ikey]);\n            if (msg.payload[keys[ikey]].action == \"setting\") \n            {\n                blinkybusSettingCubes.push(keys[ikey]);\n            }\n        }\n    }\n}\nflow.set('blinkybusCubes', blinkybusCubes);\nflow.set('blinkybusSettingCubes', blinkybusSettingCubes);\ntray.trayControl.value = 0;\nreturn {topic: 'setting', payload:{'cube':'trayControl', value:tray.trayControl.value}};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 400,
        "wires": [
            [
                "e6028ca70b6042d8"
            ]
        ]
    },
    {
        "id": "6a3a1d38244800c1",
        "type": "inject",
        "z": "b438688e0b293257",
        "name": "initFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "initFlow",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "33783d686e432aad"
            ]
        ]
    },
    {
        "id": "33783d686e432aad",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Init flow Variables",
        "func": "var trayProps = {\n    box         :   env.get(\"BOX\"),\n    type        :   env.get(\"TRAYTYPE\"),\n    name        :   env.get(\"TRAYNAME\"),\n};\nflow.set(\"serialBufSize\",env.get(\"SERIALBUFSIZE\"));\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nflow.set('deviceInit',false);\nflow.set('tray', null);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "a1ac9e631b1c38ed",
                "4d6715a3cd96c25c"
            ]
        ]
    },
    {
        "id": "b15d260b572e07f4",
        "type": "json",
        "z": "b438688e0b293257",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 300,
        "wires": [
            [
                "8fe938b67af54824"
            ]
        ]
    },
    {
        "id": "ffa001cd11b3750b",
        "type": "switch",
        "z": "b438688e0b293257",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 690,
        "y": 300,
        "wires": [
            [
                "b4c6e205db41e3e1"
            ],
            [
                "4cedc086c72eda01"
            ],
            [
                "b3fee75bbe3e5d31"
            ],
            [
                "08ee1fafdc4c41fc"
            ]
        ]
    },
    {
        "id": "8fe938b67af54824",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[5], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 300,
        "wires": [
            [
                "ffa001cd11b3750b"
            ]
        ]
    },
    {
        "id": "719cafd457722095",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nlet newMsg = null;\nlet newMsgTopic = flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/reading';\nswitch( tray.trayControl.value)\n{\n    case 0:\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    case -1:\n        tray.trayControl.value = 1;\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    default:\n        break;\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 300,
        "wires": [
            [
                "81831015c91a5f28"
            ]
        ]
    },
    {
        "id": "b3fee75bbe3e5d31",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Save config file",
        "func": "let cubeAlarm = flow.get('tray')[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'newData', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 360,
        "wires": [
            [
                "8f466a48843f0a7f"
            ]
        ]
    },
    {
        "id": "fa4e7b3501c0222d",
        "type": "inject",
        "z": "b438688e0b293257",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 180,
        "y": 740,
        "wires": [
            [
                "3de75371898f354c"
            ]
        ]
    },
    {
        "id": "3de75371898f354c",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Archive Pulse",
        "func": "var tray = flow.get('tray');\nif (tray == null) return null;\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= tray.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 740,
        "wires": [
            [
                "2eb80f1e7b1fcecd"
            ]
        ]
    },
    {
        "id": "eeba3f6f8a8a9a65",
        "type": "inject",
        "z": "b438688e0b293257",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "10a1af89d539377a"
            ]
        ]
    },
    {
        "id": "10a1af89d539377a",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Single Archive Pulse",
        "func": "return {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 800,
        "wires": [
            [
                "2eb80f1e7b1fcecd"
            ]
        ]
    },
    {
        "id": "2eb80f1e7b1fcecd",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nvar newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 740,
        "wires": [
            [
                "5de5dfce91a29ad6"
            ]
        ]
    },
    {
        "id": "b4c6e205db41e3e1",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Create Setting",
        "func": "let blinkyBusSettingMsg = null;\nlet normalSettingMsg = null;\nlet trayControlMessage = null;\nlet tray = flow.get('tray');\nif (tray == null) return [blinkyBusSettingMsg,normalSettingMsg,trayControlMessage];\nlet blinkybusSettingCubes = flow.get('blinkybusSettingCubes');\nlet icube = blinkybusSettingCubes.indexOf(msg.payload.cube);\n\nif (icube >= 0)\n{\n    blinkyBusSettingMsg = \n    {\n        topic : msg.topic, \n        payload : { value: 0,  'address': -1  } \n    }\n    blinkyBusSettingMsg.payload.address = tray[blinkybusSettingCubes[icube]].blinkybus.address;\n    blinkyBusSettingMsg.payload.value = Math.round(msg.payload.value * tray[blinkybusSettingCubes[icube]].blinkybus.scale);\n \n    flow.set('settingInProgress', true);\n    return [blinkyBusSettingMsg,normalSettingMsg,trayControlMessage];\n}\nswitch (msg.payload.cube) \n{\n    case 'alias':\n        tray.alias.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'trayControl':\n        switch(msg.payload.value)\n        {\n            case 0:\n                tray.trayControl.value = 0;\n                break;\n            case 1:\n                tray.trayControl.value = -1;\n                break;\n            case 2:\n                if (tray.trayControl.value > 0)\n                {\n                    tray.trayControl.value = 2;\n                    let trayProps  = flow.get('trayProps');\n                    node.warn(\"Asking for tray from database\");\n                    trayControlMessage =\n                    {\n                        topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n                        payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n                    };\n                }\n                break;\n            default:\n                tray.trayControl.value = 0;\n                break;\n        }\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    default:\n        break;\n}\nflow.set('settingInProgress', false);\nreturn [blinkyBusSettingMsg,normalSettingMsg,trayControlMessage];\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 240,
        "wires": [
            [
                "8ae00ce2e8187ccd"
            ],
            [
                "71df6ca08438be25"
            ],
            [
                "6c29d83d29cb0f0b"
            ]
        ]
    },
    {
        "id": "2c81c8b5ebd1f7e6",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Readings Alarm Scan",
        "func": "var newData = msg.payload;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nvar alarmFlagReading = scalarAlarmScan(tray, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nvar newMsg   = null;\nif (newData)\n{\n    newMsg = \n    {\n        topic: 'newData',\n        payload: true\n    }\n}\nreturn newMsg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 480,
        "wires": [
            [
                "bd59ed153526b94a"
            ]
        ]
    },
    {
        "id": "461b2f08f5e4f4ba",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Request tray from Database",
        "func": "let tray = flow.get('tray');\nif (tray != null) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for tray from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n};\nreturn [{ topic: \"getTrayProps\", payload: true }, newMsg];  \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 100,
        "wires": [
            [
                "a91ceff75d960313"
            ],
            [
                "961510dc1e7a036a"
            ]
        ]
    },
    {
        "id": "a91ceff75d960313",
        "type": "delay",
        "z": "b438688e0b293257",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 100,
        "wires": [
            [
                "0d7a971d3b3d078d"
            ]
        ]
    },
    {
        "id": "0d7a971d3b3d078d",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "check for tray defined out",
        "mode": "link",
        "links": [
            "226356ea922f47c6"
        ],
        "x": 1225,
        "y": 40,
        "wires": []
    },
    {
        "id": "226356ea922f47c6",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "check for tray defined in",
        "links": [
            "0d7a971d3b3d078d"
        ],
        "x": 745,
        "y": 40,
        "wires": [
            [
                "461b2f08f5e4f4ba"
            ]
        ]
    },
    {
        "id": "81831015c91a5f28",
        "type": "mqtt out",
        "z": "b438688e0b293257",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 1470,
        "y": 300,
        "wires": []
    },
    {
        "id": "aeb11c4b0eca0c4a",
        "type": "mqtt in",
        "z": "b438688e0b293257",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 170,
        "y": 300,
        "wires": [
            [
                "b15d260b572e07f4"
            ]
        ]
    },
    {
        "id": "5de5dfce91a29ad6",
        "type": "mqtt out",
        "z": "b438688e0b293257",
        "name": "Publish Archive",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 800,
        "y": 740,
        "wires": []
    },
    {
        "id": "a638e9747ad9554b",
        "type": "split",
        "z": "b438688e0b293257",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "be9ee020c27a7c26"
            ]
        ]
    },
    {
        "id": "ef8c2e4f95bfdb94",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Allow Readings",
        "func": "if (msg.payload.address == -1)\n{\n    flow.set('settingInProgress',false);\n    flow.set('deviceInit', false);\n}\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 620,
        "wires": []
    },
    {
        "id": "2c21f72a1646438b",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Send Setting",
        "func": "flow.set('settingInProgress',true);\nvar bufsize = 4;\nvar buffer = new ArrayBuffer(bufsize);\nvar settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1); //setting\nsettingsView.setUint8(1, msg.payload.address); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:'setting',payload:Buffer.from(buffer),address:msg.payload.address, baudrate:env.get(\"BAUDRATE\")};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 460,
        "wires": [
            [
                "6516f706eef59888"
            ]
        ]
    },
    {
        "id": "0905cf97ddba9975",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Get Reading",
        "func": "var bufsize = 4;\nvar buffer = new ArrayBuffer(bufsize);\nvar settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 0); //setting\nsettingsView.setUint8(1, 0); //address\nsettingsView.setInt16(2, 0); //value\n\nreturn {topic:'reading',payload:Buffer.from(buffer),timeStamp:msg.timeStamp, baudrate:env.get(\"BAUDRATE\")};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 540,
        "wires": [
            [
                "6516f706eef59888"
            ]
        ]
    },
    {
        "id": "cf88bab40c6dc9e9",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Check Reading",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\nlet blinkybusCubes = flow.get('blinkybusCubes');\n\nlet stateView  = new DataView(new ArrayBuffer(2));\nfor (let ib = 0; ib < 2; ++ib)   stateView.setUint8(ib, msg.payload[1 - ib]);\nlet state = stateView.getInt16(0)\nif (state == 1)\n{\n    return [null, {topic:\"initDevice\",payload:true}];\n}\n\nfor (let icube = 0; icube < blinkybusCubes.length; ++icube)\n{\n    let cube = tray[blinkybusCubes[icube]];\n    let dataView  = new DataView(new ArrayBuffer(2));\n    for (let ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(cube.blinkybus.address * 2) + 1 - ib]);\n    cube.value = dataView.getInt16(0);\n    cube.value = cube.value / cube.blinkybus.scale;\n}\ntray.timeStamp = new Date().getTime();\nlet topic = 'newReading';\nif (flow.get('settingInProgress'))\n{\n    topic = 'newSetting';\n    if (!flow.get('deviceInit')) flow.set('settingInProgress', false)\n}\nreturn [{topic:topic, payload:true},null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "2c81c8b5ebd1f7e6"
            ],
            [
                "73f0429c49b37d63"
            ]
        ]
    },
    {
        "id": "f39fb963c816d17d",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "BlinkyBus Setting In",
        "links": [
            "892b22b7b28322db",
            "8ae00ce2e8187ccd"
        ],
        "x": 95,
        "y": 460,
        "wires": [
            [
                "2c21f72a1646438b"
            ]
        ]
    },
    {
        "id": "892b22b7b28322db",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "f39fb963c816d17d"
        ],
        "x": 1315,
        "y": 440,
        "wires": []
    },
    {
        "id": "be9ee020c27a7c26",
        "type": "switch",
        "z": "b438688e0b293257",
        "name": "",
        "property": "payload.address",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 560,
        "wires": [
            [
                "892b22b7b28322db"
            ],
            [
                "1c10263b2599d429"
            ]
        ]
    },
    {
        "id": "1c10263b2599d429",
        "type": "delay",
        "z": "b438688e0b293257",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1360,
        "y": 620,
        "wires": [
            [
                "ef8c2e4f95bfdb94"
            ]
        ]
    },
    {
        "id": "73f0429c49b37d63",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Init Gizmo",
        "func": "flow.set('deviceInit',true);\nflow.set('settingInProgress',true);\nlet tray = flow.get('tray');\nlet blinkybusSettingCubes = flow.get('blinkybusSettingCubes');\n\nlet msgs = [];\nmsgs.push({\"address\":0,\"value\":0});\nfor (let icube = 0; icube < blinkybusSettingCubes.length; ++icube)\n{\n    let cube = tray[blinkybusSettingCubes[icube]];\n    let cubeValue = Math.round(cube.value * cube.blinkybus.scale);\n    msgs.push({\"address\":cube.blinkybus.address,\"value\":cubeValue });\n}\nmsgs.push({\"address\":-1,\"value\":0});\nreturn {topic : 'initDevice', payload: msgs};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 560,
        "wires": [
            [
                "a638e9747ad9554b"
            ]
        ]
    },
    {
        "id": "857e0090c2c66405",
        "type": "inject",
        "z": "b438688e0b293257",
        "name": "read Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "$(POLLINTERVAL)",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "readTable",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "3bb186c6ab3b8e3f"
            ]
        ]
    },
    {
        "id": "3bb186c6ab3b8e3f",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Read BlinkyBus",
        "func": "if (flow.get('settingInProgress')) return null;\nlet tray = flow.get('tray');\nif (tray == null) return null;\nreturn {topic: \"readStatus\", payload:true, timeStamp:msg.payload};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 620,
        "wires": [
            [
                "0905cf97ddba9975"
            ]
        ]
    },
    {
        "id": "8ae00ce2e8187ccd",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "Create Setting out",
        "mode": "link",
        "links": [
            "f39fb963c816d17d"
        ],
        "x": 1075,
        "y": 200,
        "wires": []
    },
    {
        "id": "6c29d83d29cb0f0b",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "trayControl Out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1075,
        "y": 280,
        "wires": []
    },
    {
        "id": "f5153c8898e1a608",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "trayControl In",
        "links": [
            "6c29d83d29cb0f0b",
            "961510dc1e7a036a"
        ],
        "x": 1355,
        "y": 240,
        "wires": [
            [
                "81831015c91a5f28"
            ]
        ]
    },
    {
        "id": "e90864c178e3c08e",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "Publish Tray In",
        "links": [
            "bd59ed153526b94a",
            "71df6ca08438be25",
            "8f466a48843f0a7f",
            "bd491678f8e24259",
            "974629da19a525ea"
        ],
        "x": 1175,
        "y": 300,
        "wires": [
            [
                "719cafd457722095"
            ]
        ]
    },
    {
        "id": "bd59ed153526b94a",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "alarm scan out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1175,
        "y": 480,
        "wires": []
    },
    {
        "id": "71df6ca08438be25",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "create normal setting out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1075,
        "y": 240,
        "wires": []
    },
    {
        "id": "8f466a48843f0a7f",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "save config out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1075,
        "y": 360,
        "wires": []
    },
    {
        "id": "bd491678f8e24259",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "ping out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1075,
        "y": 320,
        "wires": []
    },
    {
        "id": "4cedc086c72eda01",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "prep ping",
        "func": "return {topic:'newData', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 320,
        "wires": [
            [
                "bd491678f8e24259"
            ]
        ]
    },
    {
        "id": "e6028ca70b6042d8",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "save tray config out",
        "mode": "link",
        "links": [
            "21ead1f81b53e80b"
        ],
        "x": 1075,
        "y": 400,
        "wires": []
    },
    {
        "id": "21ead1f81b53e80b",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "setting switch in",
        "links": [
            "e6028ca70b6042d8"
        ],
        "x": 605,
        "y": 380,
        "wires": [
            [
                "ffa001cd11b3750b"
            ]
        ]
    },
    {
        "id": "961510dc1e7a036a",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "reload trays out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1065,
        "y": 160,
        "wires": []
    },
    {
        "id": "a1ac9e631b1c38ed",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "MQTT subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').type +'/' + flow.get('trayProps').name + \"/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "aeb11c4b0eca0c4a"
            ]
        ]
    },
    {
        "id": "4d6715a3cd96c25c",
        "type": "delay",
        "z": "b438688e0b293257",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 100,
        "wires": [
            [
                "461b2f08f5e4f4ba"
            ]
        ]
    },
    {
        "id": "6516f706eef59888",
        "type": "serial request",
        "z": "b438688e0b293257",
        "name": "",
        "serial": "a4f4c59daf894823",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "cf88bab40c6dc9e9"
            ]
        ]
    }
]